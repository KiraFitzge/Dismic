% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mdb-get.R
\name{mdb_get}
\alias{mdb_get}
\title{Read in an mdb file.}
\usage{
mdb_get(file, tables = NULL, mdbexportArgs = "", ...)
}
\arguments{
\item{file}{mdb file to read. You may need to surround the name in quotes, like '"file name.mdb"'.}

\item{tables}{either a list or vector of table names; tables = TRUE to import a list of tables; or the default which means import all tables}

\item{mdbexportArgs}{arguments to pass to mdb-export. See details for some examples, and man mdb-export for a comprehensive discussion of all possible terminal arguments.}

\item{...}{arguments passed to readr::read_csv.}
}
\value{
if only 1 table is read, a tibble. Otherwise, a list of tibbles containing all the tables read in.
}
\description{
A shortened, simplified version of Hmisc::mdb.get
}
\details{
Still uses mdbtools internally (so that needs to be installed). On Ubuntu, use sudo apt get install mdbtools.

The process is to use mdbtools to convert the mdb table into a csv file, then use readr::read_csv to read the csv file in quickly.

You will commonly want to use mdbexportArgs = '-D\%m/\%d/\%Y' to get the dates right. m means month, d means day, and Y means 4-digit year (note that y would mean 2 digit year). Without explicitly stating this, mdb-export will commonly export as m/d/y format instead, which makes it impossible to tell e.g. 1910 from 2010.

you may also be interested in the common idiom, col_types = cols(.default = col_character()), which tells read_csv to read in all columns as characters. This is guaranteed to avoid parsing failures at the read_csv step.
}

